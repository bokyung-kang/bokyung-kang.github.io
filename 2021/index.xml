<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2021s on Bokyung&#39;s Note</title>
    <link>https://bokyung-kang.github.io/2021/</link>
    <description>Recent content in 2021s on Bokyung&#39;s Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 17 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://bokyung-kang.github.io/2021/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Amazon Linux2에 Jenkins 설치하기</title>
      <link>https://bokyung-kang.github.io/2021/03/17/jenkins-install/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bokyung-kang.github.io/2021/03/17/jenkins-install/</guid>
      <description>로컬 도커환경에서 Jenkins를 테스트 하던 중에 에러가 나는 경우가 있어서 검증을 위해서 Amazon Linux2에 Jenkins를 설치 해 보았습니다.
EC2 인스턴스 생성 및 Jenkins설치 EC2 인스턴스 생성 및 보안그룹 설정   맨위에 표시되는 AMI로 생성했습니다.   젠킨스 접속용 8080포트와 SSH접속용 22번 포트를 설정합니다.   Jenkins 설치  Jenkins 공홈 설치 방법 에 나와있는 순서대로 설치하였습니다.  sudo wget -O /etc/yum.repos.d/jenkins.repo \ https://pkg.jenkins.io/redhat-stable/jenkins.repo sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key sudo yum upgrade sudo yum install jenkins java-1.</description>
    </item>
    
    <item>
      <title>CircleCI의 Contexts를 이용하여 AWS ECS 자동 배포하기</title>
      <link>https://bokyung-kang.github.io/2021/02/02/clrcleci-ecs-deploy/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bokyung-kang.github.io/2021/02/02/clrcleci-ecs-deploy/</guid>
      <description>springboot + kotlin으로 개발한 backendAPI를 CircleCI로 배포하고 있습니다. staging/production 환경별 환경변수를 Contexts를 이용하면 좀 더 편리하게 설정할 수 있습니다.
Contexts 설정 Organization Settings &amp;gt; Contexts 에서 서비스의 각 환경별 환경변수를 설정합니다. staging/production 환경 이름으로 등록했습니다. staging 환경의 환경변수입니다. ecr와 ecs용 orbs를 이용하기 위해서 AWS 환경변수를 추가하고 프로젝트에서 공통으로 사용하기 위해서 SERVICE_PREFIX를 추가했습니다. CircleCI config.yml 설정 build-and-push-image  backend-build를 실행합니다. release 브랜치인 경우 build-and-push-image-staging을 실행합니다. master 브랜치인 경우 build-and-push-image-production을 실행합니다. context에는 CircleCI Contexts에서 지정한 이름을 추가합니다.</description>
    </item>
    
  </channel>
</rss>
