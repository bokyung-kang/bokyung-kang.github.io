<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2021s on Bokyung&#39;s Note</title>
    <link>https://bokyung.dev/2021/</link>
    <description>Recent content in 2021s on Bokyung&#39;s Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://bokyung.dev/2021/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CloudFront와 Lambda@Edge를 이용해서 이미지 리사이징하기</title>
      <link>https://bokyung.dev/2021/05/14/lambda-edge-resize/</link>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bokyung.dev/2021/05/14/lambda-edge-resize/</guid>
      <description>리사이징 된 이미지를 S3에 저장하지 않고 원본만 이용해서 리사이징 하는 방법은 없을까 고민하던차에 Lambda@Edge를 이용해서 이미지 리사이징 하는 방법을 적용해 보았습니다.
Lambda@Edge 동작 원리    Lambda@Edge는 CloudFront에 접근할 때 실행되는 Lambda의 확장판입니다. CloudFront 이벤트가 발생할 때 Lambda 함수를 실행할 수 있습니다. 이벤트는 4가지가 있습니다.
 Viewer Request : CloudFront가 뷰어로부터 요청을 받고 요청한 개체가 edge cache에 있는지 확인하기 전에 함수를 실행합니다. Origin Request : CloudFront가 오리진으로 요청을 전달할 때만 실행됩니다.</description>
    </item>
    
    <item>
      <title>Sentry를 리액트 프로젝트에 적용하기</title>
      <link>https://bokyung.dev/2021/04/16/sentry-react/</link>
      <pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bokyung.dev/2021/04/16/sentry-react/</guid>
      <description>공식사이트 를 보면서 react.js에 Sentry를 적용해 보았습니다.
버전  react 17.0.1 Sentry  @sentry/react 6.2.5 @sentry/tracing 6.2.5    Sentry에 프로젝트 추가 및 설정   Sentry에 로그인 후 프로젝트를 생성합니다.
  Client Keys (DSN)메뉴에 있는 DSN키를 복사해둡니다.     sentry 패키지 인스톨
npm install --save @sentry/react @sentry/tracing   index.js에 Sentry를 초기화해주는 코드를 추가합니다.
import React from &amp;quot;react&amp;quot;; import ReactDOM from &amp;quot;react-dom&amp;quot;; import * as Sentry from &amp;quot;@sentry/react&amp;quot;; import { Integrations } from &amp;quot;@sentry/tracing&amp;quot;; import App from &amp;quot;.</description>
    </item>
    
    <item>
      <title>Flyway 일부 수동으로 작업하기</title>
      <link>https://bokyung.dev/2021/04/15/flyway-springboot/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bokyung.dev/2021/04/15/flyway-springboot/</guid>
      <description>스프링부트 프로젝트에서 Flyway를 사용하다 보면 수동으로 작업을 해야 하는 경우가 생깁니다. 데이터가 많은 테이블에 수동으로 컬럼이나 인덱스를 추가한다던가. 그런데 이렇게 되면 누가 수동으로 작업을 했는지 이력이 남지 않기때문에 이력관리도 할 수 있는 방법이 없을까하고 공식 Document를 찾아봤습니다. ignoreIgnoredMigrations파라미터를 테스트해 보았습니다.
버전  Flyway  flyway-core 7.1.1   Spring Boot 2.4.1  테이블 추가, 서버 기동  sql버전 파일 추가  V1.0.0__Create_accounts.sql CREATE TABLE accounts ( user_id serial PRIMARY KEY, username VARCHAR ( 50 ) UNIQUE NOT NULL, password VARCHAR ( 50 ) NOT NULL, created_on TIMESTAMP NOT NULL );  V1.</description>
    </item>
    
    <item>
      <title>Sentry를 스프링부트 프로젝트에 적용하기</title>
      <link>https://bokyung.dev/2021/04/15/sentry-springboot/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bokyung.dev/2021/04/15/sentry-springboot/</guid>
      <description>react.js에 Sentry를 적용하려고 찾아보던 중에 스프링부트도 대응언어에 포함되어있어서 테스트해 보았습니다.
버전  Spring Boot 2.4.1 Sentry  sentry-spring-boot-starter 4.3.0    Sentry에 프로젝트 추가 및 설정   Sentry에 로그인 후 프로젝트를 생성합니다.
  Client Keys (DSN)메뉴에 있는 DSN키를 복사해둡니다.     build.gradle.kts에 의존관계를 추가합니다.
 build.gradle.kts implementation(&amp;quot;io.sentry:sentry-spring-boot-starter:4.3.0&amp;quot;)     application.properties에 DSN (Data Source Name)을 설정합니다.
 application.properties # DSN설정 sentry.dsn=https://xxxxxxxxxxxxxxxxxxxxxxxxxxx@xxxxxx.ingest.sentry.io/xxxxx # 에러 추척 설정 sentry.</description>
    </item>
    
    <item>
      <title>Jenkins에서 Spring Batch Job을 실행하기</title>
      <link>https://bokyung.dev/2021/03/31/jenkins-batch-job/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bokyung.dev/2021/03/31/jenkins-batch-job/</guid>
      <description>Jenkins에서 스프링 배치 Job을 실행해 보았습니다.
Jenkins 환경  Amazon Linux2  AMI ID : ami-0f27d081df46f326c AMI 이름 : amzn2-ami-hvm-2.0.20210303.0-x86_64-gp2   Jenkins  version : Jenkins 2.284    환경변수와 플러그인 설정   여러 Job을 등록하는 경우 각각의 Job에서 같은 파라미터를 넘겨주게 되는데 환경변수에 등록해두면 관리하기가 편해집니다.
  Job파라미터로 실행날짜를 넘겨주기 위해서 timestamper플러그인을 사용하였습니다.     Manage Jenkins &amp;gt; System Configuration &amp;gt; Configure System &amp;gt; Global properties &amp;gt; Environment variables에서 Job에서 공통으로 사용하는 환경변수를 설정합니다.</description>
    </item>
    
    <item>
      <title>Jenkins에서 Spring Batch 프로젝트를 Gradle 빌드하기</title>
      <link>https://bokyung.dev/2021/03/30/jenkins-gradle-build/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bokyung.dev/2021/03/30/jenkins-gradle-build/</guid>
      <description>스프링 배치 Job Runner를 조사하던 중에 Jenkins에서 batch프로젝트를 gradle빌드해 보았습니다.
Jenkins 환경  Amazon Linux2  AMI ID : ami-0f27d081df46f326c AMI 이름 : amzn2-ami-hvm-2.0.20210303.0-x86_64-gp2   Jenkins  version : Jenkins 2.284    인증정보 등록 Github 아이디/패스워드 인증 방법   Jenkins에서 Repository관련 작업이 가능하도록 Github에서 Personal access tokens를 발행합니다. ( Settings &amp;gt; Developer settings &amp;gt; Personal access tokens )     Manage Jenkins &amp;gt; Manage Credentials &amp;gt; domain에 있는 global을 클릭합니다.</description>
    </item>
    
    <item>
      <title>Amazon Linux2에 Jenkins 설치하기</title>
      <link>https://bokyung.dev/2021/03/17/jenkins-install/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bokyung.dev/2021/03/17/jenkins-install/</guid>
      <description>로컬 도커환경에서 Jenkins를 테스트 하던 중에 에러가 나는 경우가 있어서 검증을 위해서 Amazon Linux2에 Jenkins를 설치 해 보았습니다.
설치한 Jenkins 환경  Amazon Linux2  AMI ID : ami-0f27d081df46f326c AMI 이름 : amzn2-ami-hvm-2.0.20210303.0-x86_64-gp2   Jenkins  version : Jenkins 2.284    EC2 인스턴스 생성 및 Jenkins설치 EC2 인스턴스 생성 및 보안그룹 설정   맨위에 표시되는 AMI로 생성했습니다.     젠킨스 접속용 8080포트와 SSH접속용 22번 포트를 설정합니다.</description>
    </item>
    
    <item>
      <title>CircleCI의 Contexts를 이용하여 AWS ECS 자동 배포하기</title>
      <link>https://bokyung.dev/2021/02/02/clrcleci-ecs-deploy/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bokyung.dev/2021/02/02/clrcleci-ecs-deploy/</guid>
      <description>springboot + kotlin으로 개발한 backendAPI를 CircleCI로 배포하고 있습니다. staging/production 환경별 환경변수를 Contexts를 이용하면 좀 더 편리하게 설정할 수 있습니다.
Contexts 설정 Organization Settings &amp;gt; Contexts 에서 서비스의 각 환경별 환경변수를 설정합니다. staging/production 환경 이름으로 등록했습니다.   staging 환경의 환경변수입니다. ecr와 ecs용 orbs를 이용하기 위해서 AWS 환경변수를 추가하고 프로젝트에서 공통으로 사용하기 위해서 SERVICE_PREFIX를 추가했습니다.   CircleCI config.yml 설정 build-and-push-image  backend-build를 실행합니다. release 브랜치인 경우 build-and-push-image-staging을 실행합니다. master 브랜치인 경우 build-and-push-image-production을 실행합니다.</description>
    </item>
    
  </channel>
</rss>
