[{"content":"JenkinsでSpring Batch Jobを実行してみました。\nJenkinsの環境  Amazon Linux2  AMI ID : ami-0f27d081df46f326c AMI名 : amzn2-ami-hvm-2.0.20210303.0-x86_64-gp2   Jenkins  version : Jenkins 2.284    環境変数とプラグイン設定   複数のJobを登録する場合は、各Jobに同じパラメータを設定することになりますが、環境変数に登録しておくと一括管理ができます。\n  Jobパラメーターに実行日を渡すために、timestamperプラグインを利用しました。     Manage Jenkins \u0026gt; System Configuration \u0026gt; Configure System \u0026gt; Global properties \u0026gt; Environment variablesでJob共通で利用している環境変数を設定します。     Batch Job登録  New Item \u0026gt; Freestyle projectを選び、JOBを登録します。     java -jar ${JAR_NAME} ${DB_HOST} ${DB_PORT} ${DB_NAME} ${DB_USER} ${DB_PASSWORD} \\ --spring.batch.job.names=${JOB_NAME} version=${BUILD_NUMBER} requestDate=${BUILD_TIMESTAMP} --spring.batch.job.enabled=true --spring.profiles.active=dev Batch Job実行  Jobを実行し、実行結果を確認します。  2021-03-31 13:09:56.358 INFO 3564 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2021-03-31 13:09:56.379 INFO 3564 --- [ main] c.e.sample.batch.BatchApplicationKt : Started BatchApplicationKt in 12.493 seconds (JVM running for 13.807) 2021-03-31 13:09:56.380 INFO 3564 --- [ main] o.s.b.a.b.JobLauncherApplicationRunner : Running default command line with: [version=17, requestDate=2021-03-31] 2021-03-31 13:09:56.516 INFO 3564 --- [ main] o.s.b.c.l.support.SimpleJobLauncher : Job: [SimpleJob: [name=jpaJob]] launched with the following parameters: [{requestDate=2021-03-31, version=17}] 2021-03-31 13:09:56.600 INFO 3564 --- [ main] o.s.batch.core.job.SimpleStepHandler : Executing step: [jpaPagingItemStep] 2021-03-31 13:09:57.071 INFO 3564 --- [ main] o.s.batch.core.step.AbstractStep : Step: [jpaPagingItemStep] executed in 471ms 2021-03-31 13:09:57.092 INFO 3564 --- [ main] o.s.b.c.l.support.SimpleJobLauncher : Job: [SimpleJob: [name=jpaJob]] completed with the following parameters: [{requestDate=2021-03-31, version=17}] and the following status: [COMPLETED] in 521ms 2021-03-31 13:09:57.127 INFO 3564 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Shutting down ExecutorService 'applicationTaskExecutor' 2021-03-31 13:09:57.129 INFO 3564 --- [ main] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default' 2021-03-31 13:09:57.140 INFO 3564 --- [ main] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Shutdown initiated... 2021-03-31 13:09:57.155 INFO 3564 --- [ main] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Shutdown completed. Finished: SUCCESS BatchApplication.kt  Job実行終了し、applicationも終了させるための設定。  @EnableBatchProcessing @SpringBootApplication class BatchApplication fun main(args: Array\u0026lt;String\u0026gt;) { val context = runApplication\u0026lt;BatchApplication\u0026gt;(*args) val exitCode = SpringApplication.exit(context) System.exit(exitCode) } ","permalink":"https://bokyung-kang.github.io/ja/2021/03/31/jenkins-batch-job/","summary":"JenkinsでSpring Batch Jobを実行してみました。\nJenkinsの環境  Amazon Linux2  AMI ID : ami-0f27d081df46f326c AMI名 : amzn2-ami-hvm-2.0.20210303.0-x86_64-gp2   Jenkins  version : Jenkins 2.284    環境変数とプラグイン設定   複数のJobを登録する場合は、各Jobに同じパラメータを設定することになりますが、環境変数に登録しておくと一括管理ができます。\n  Jobパラメーターに実行日を渡すために、timestamperプラグインを利用しました。     Manage Jenkins \u0026gt; System Configuration \u0026gt; Configure System \u0026gt; Global properties \u0026gt; Environment variablesでJob共通で利用している環境変数を設定します。     Batch Job登録  New Item \u0026gt; Freestyle projectを選び、JOBを登録します。     java -jar ${JAR_NAME} ${DB_HOST} ${DB_PORT} ${DB_NAME} ${DB_USER} ${DB_PASSWORD} \\ --spring.","title":"Jenkins環境でSpring Batch Jobを実行する"},{"content":"Spring BatchのJob Runnerを調査していましたが、その中でJenkinsでbatchプロジェクトをgradleビルドをしてみました。\nJenkinsの環境  Amazon Linux2  AMI ID : ami-0f27d081df46f326c AMI名 : amzn2-ami-hvm-2.0.20210303.0-x86_64-gp2   Jenkins  version : Jenkins 2.284    認証情報登録 Github ID/PASSWORD認証方法   JenkinsでRepository関連作業ができるようにGithub上でPersonal access tokensを発行します。 ( Settings \u0026gt; Developer settings \u0026gt; Personal access tokens )     Manage Jenkins \u0026gt; Manage Credentials \u0026gt; domainにあるglobalをクリックします。     KindはUsername with passwordを選び、パスワード欄にはPersonal access tokens値を入力し認証情報を追加します。     Github SSH 認証方法   SSH鍵を作成します。       Githubプロジェクト設定のDeploy keysに公開鍵を追加します。     KindはSSH Username with private keyを選び、Private Key \u0026gt; Enter directlyに秘密鍵を追加します。     Gradle, JDK設定  プロジェクトで利用するGradleとJDKを Manage Jenkins \u0026gt; System Configuration \u0026gt; Global Tool Configurationにて設定します。一つのバージョンのみ設定した場合は、各JOBでデフォルトとして設定されます。複数のバージョンが登録されている場合は、JOB設定時バージョンを選べられます。     Job登録   New Item \u0026gt; Freestyle projectを選び、JOBを登録します。github access tokens認証の場合は、Repository URLに git@github.com:bokyung-kang/batch-testを入力しCredentialsはgithub認証を登録したUsernameを選択します。     ssh認証の場合はRepository URLに git@github.com:bokyung-kang/batch-testを入力しCredentialsはssh認証を登録したUsernameを選択します。     build script\nchmod +x gradlew # testを実行しないようにassembleを実行しました。 ./gradlew assemble # deploy-testへjarをコピー。 mkdir -p $JENKINS_HOME/workspace/deploy-test cp $WORKSPACE/build/libs/*.jar $JENKINS_HOME/workspace/deploy-test/.   Gradle Build  ビルドを実行し、Console Outputを見てみます。  [batch-test] $ /bin/sh -xe /tmp/jenkins568576160326820555.sh + chmod +x gradlew + ./gradlew assemble Starting a Gradle Daemon (subsequent builds will be faster) \u0026gt; Task :compileKotlin \u0026gt; Task :compileJava NO-SOURCE \u0026gt; Task :processResources \u0026gt; Task :classes \u0026gt; Task :bootJarMainClassName \u0026gt; Task :bootJar \u0026gt; Task :inspectClassesForKotlinIC \u0026gt; Task :jar SKIPPED \u0026gt; Task :assemble BUILD SUCCESSFUL in 33s 5 actionable tasks: 5 executed + mkdir -p /var/lib/jenkins/workspace/deploy-test + cp /var/lib/jenkins/workspace/batch-test/build/libs/batch-0.0.1-SNAPSHOT.jar /var/lib/jenkins/workspace/deploy-test/. Finished: SUCCESS  $JENKINS_HOME/workspace/deploy-test/にjarファイルがコピーされていることが確認できます。     ","permalink":"https://bokyung-kang.github.io/ja/2021/03/30/jenkins-gradle-build/","summary":"Spring BatchのJob Runnerを調査していましたが、その中でJenkinsでbatchプロジェクトをgradleビルドをしてみました。\nJenkinsの環境  Amazon Linux2  AMI ID : ami-0f27d081df46f326c AMI名 : amzn2-ami-hvm-2.0.20210303.0-x86_64-gp2   Jenkins  version : Jenkins 2.284    認証情報登録 Github ID/PASSWORD認証方法   JenkinsでRepository関連作業ができるようにGithub上でPersonal access tokensを発行します。 ( Settings \u0026gt; Developer settings \u0026gt; Personal access tokens )     Manage Jenkins \u0026gt; Manage Credentials \u0026gt; domainにあるglobalをクリックします。     KindはUsername with passwordを選び、パスワード欄にはPersonal access tokens値を入力し認証情報を追加します。     Github SSH 認証方法   SSH鍵を作成します。       Githubプロジェクト設定のDeploy keysに公開鍵を追加します。     KindはSSH Username with private keyを選び、Private Key \u0026gt; Enter directlyに秘密鍵を追加します。     Gradle, JDK設定  プロジェクトで利用するGradleとJDKを Manage Jenkins \u0026gt; System Configuration \u0026gt; Global Tool Configurationにて設定します。一つのバージョンのみ設定した場合は、各JOBでデフォルトとして設定されます。複数のバージョンが登録されている場合は、JOB設定時バージョンを選べられます。     Job登録   New Item \u0026gt; Freestyle projectを選び、JOBを登録します。github access tokens認証の場合は、Repository URLに git@github.","title":"Jenkins環境でSpring BatchプロジェクトをGradleビルドする"},{"content":"ローカル環境でJenkinsを試しましたが、エラーになるケールがあったため、検証のために、Amazon Linux2にJenkinsをインストールしてみました。\n構築するJenkinsの環境  Amazon Linux2  AMI ID : ami-0f27d081df46f326c AMI名 : amzn2-ami-hvm-2.0.20210303.0-x86_64-gp2   Jenkins  version : Jenkins 2.284    EC2インスタンス作成及びJenkinsインストール EC2インスタンス作成ととセキュリティグループ設定   一番上に表示されているAMIを利用して作成しました。     Jenkinsアクセス用の8080ポートと、SSH接続用の22ポートを設定します。     Jenkinsインストール  Jenkins公式サイトのインストール方法 の順番通りに実行。  sudo wget -O /etc/yum.repos.d/jenkins.repo \\ https://pkg.jenkins.io/redhat-stable/jenkins.repo sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key sudo yum upgrade sudo yum install jenkins java-1.8.0-openjdk-devel.x86_64 sudo systemctl daemon-reload Jenkins 実行 sudo systemctl start jenkins サービス実行状態を確認し、active状態になっていることを確認します。   Jenkins 初期設定   Jenkinsへアクセスします。http://xxxxxxxxxx:8080/\n  初期パスワードを入力します。     プラグインをインストールします。     初期ユーザーを登録します。     インスタンスURLを設定します。     設定が完了しました。     メイン画面が表示されました。     ","permalink":"https://bokyung-kang.github.io/ja/2021/03/17/jenkins-install/","summary":"ローカル環境でJenkinsを試しましたが、エラーになるケールがあったため、検証のために、Amazon Linux2にJenkinsをインストールしてみました。\n構築するJenkinsの環境  Amazon Linux2  AMI ID : ami-0f27d081df46f326c AMI名 : amzn2-ami-hvm-2.0.20210303.0-x86_64-gp2   Jenkins  version : Jenkins 2.284    EC2インスタンス作成及びJenkinsインストール EC2インスタンス作成ととセキュリティグループ設定   一番上に表示されているAMIを利用して作成しました。     Jenkinsアクセス用の8080ポートと、SSH接続用の22ポートを設定します。     Jenkinsインストール  Jenkins公式サイトのインストール方法 の順番通りに実行。  sudo wget -O /etc/yum.repos.d/jenkins.repo \\ https://pkg.jenkins.io/redhat-stable/jenkins.repo sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key sudo yum upgrade sudo yum install jenkins java-1.8.0-openjdk-devel.x86_64 sudo systemctl daemon-reload Jenkins 実行 sudo systemctl start jenkins サービス実行状態を確認し、active状態になっていることを確認します。   Jenkins 初期設定   Jenkinsへアクセスします。http://xxxxxxxxxx:8080/","title":"Amazon Linux2にJenkinsをインストールする"},{"content":"springboot + kotlinで開発したbackendAPIをCircleCIを利用してデプロイしています。 staging/production環境毎の環境変数はContextsを利用すればもっと簡単に設定することが可能です。\nContexts設定 Organization Settings \u0026gt; Contexts でサービスの各環境毎の環境変数を設定します。 staging/productionの環境名で追加しました。   staging環境の環境変数です。 ecrとecsのorbsを利用するため、AWSの環境変数を追加し、プロジェクト内で共通で利用するためにSERVICE_PREFIXを追加しました。   CircleCI config.yml 設定 build-and-push-image  backend-buildを実行します。 releaseブランチの場合、build-and-push-image-stagingを実行します。 masterブランチの場合、build-and-push-image-productionを実行します。 contextにはCircleCI Contextsで指定した名前を指定します。  version: 2.1 orbs: aws-ecr: circleci/aws-ecr@6.15.3 aws-ecs: circleci/aws-ecs@1.4.0 gradle: circleci/gradle@2.2.0 executors: openjdk-executor: docker: - image: circleci/openjdk:14-jdk-buster-node-browsers ..... jobs: backend-build: executor: openjdk-executor ..... workflows: build-deploy: jobs: - backend-build - aws-ecr/build-and-push-image: name: build-and-push-image-staging requires: - backend-build context: DEMO_STAGING attach-workspace: true checkout: false repo: \u0026#39;${SERVICE_PREFIX}\u0026#39; tag: \u0026#39;latest,${CIRCLE_SHA1}\u0026#39; filters: branches: only: - /release\\/.*/ - aws-ecr/build-and-push-image: name: build-and-push-image-production requires: - backend-build context: DEMO_PRODUCTION attach-workspace: true checkout: false repo: \u0026#39;${SERVICE_PREFIX}\u0026#39; tag: \u0026#39;latest,${CIRCLE_SHA1}\u0026#39; filters: branches: only: - master deploy-service-update  backend-buildを実行します。 releaseブランチの場合、build-and-push-image-stagingの実行が完了されたらdeploy-service-update-stagingを実行します。 masteブランチの場合、build-and-push-image-productionの実行が完了されたらbuild-and-push-image-productionを実行します。 contextにはCircleCI Contextsで指定した名前を指定します。  - aws-ecs/deploy-service-update: name: deploy-service-update-staging requires: - build-and-push-image-staging context: DEMO_STAGING family: \u0026#39;${SERVICE_PREFIX}-backend\u0026#39; cluster-name: \u0026#39;${SERVICE_PREFIX}-backend\u0026#39; service-name: \u0026#39;${SERVICE_PREFIX}-backend-ec2-service\u0026#39; container-image-name-updates: \u0026#39;container=${SERVICE_PREFIX}-backend,tag=${CIRCLE_SHA1}\u0026#39; filters: branches: only: - /release\\/.*/ - aws-ecs/deploy-service-update: name: deploy-service-update-production requires: - build-and-push-image-production context: DEMO_PRODUCTION family: \u0026#39;${SERVICE_PREFIX}-backend\u0026#39; cluster-name: \u0026#39;${SERVICE_PREFIX}-backend\u0026#39; service-name: \u0026#39;${SERVICE_PREFIX}-backend-ec2-service\u0026#39; container-image-name-updates: \u0026#39;container=${SERVICE_PREFIX}-backend,tag=${CIRCLE_SHA1}\u0026#39; filters: branches: only: - master CircleCI デプロイ release/20210202_1 ブランチを push   新たなタスク定義が登録されていることを確認 task-definition/*****-backend:5   AWS ECS 確認  タスク定義 demo1-backend:5でタスクが起動されていることが確認できます。     ","permalink":"https://bokyung-kang.github.io/ja/2021/02/02/clrcleci-ecs-deploy/","summary":"springboot + kotlinで開発したbackendAPIをCircleCIを利用してデプロイしています。 staging/production環境毎の環境変数はContextsを利用すればもっと簡単に設定することが可能です。\nContexts設定 Organization Settings \u0026gt; Contexts でサービスの各環境毎の環境変数を設定します。 staging/productionの環境名で追加しました。   staging環境の環境変数です。 ecrとecsのorbsを利用するため、AWSの環境変数を追加し、プロジェクト内で共通で利用するためにSERVICE_PREFIXを追加しました。   CircleCI config.yml 設定 build-and-push-image  backend-buildを実行します。 releaseブランチの場合、build-and-push-image-stagingを実行します。 masterブランチの場合、build-and-push-image-productionを実行します。 contextにはCircleCI Contextsで指定した名前を指定します。  version: 2.1 orbs: aws-ecr: circleci/aws-ecr@6.15.3 aws-ecs: circleci/aws-ecs@1.4.0 gradle: circleci/gradle@2.2.0 executors: openjdk-executor: docker: - image: circleci/openjdk:14-jdk-buster-node-browsers ..... jobs: backend-build: executor: openjdk-executor ..... workflows: build-deploy: jobs: - backend-build - aws-ecr/build-and-push-image: name: build-and-push-image-staging requires: - backend-build context: DEMO_STAGING attach-workspace: true checkout: false repo: \u0026#39;${SERVICE_PREFIX}\u0026#39; tag: \u0026#39;latest,${CIRCLE_SHA1}\u0026#39; filters: branches: only: - /release\\/.","title":"CircleCIのContextsを利用し、AWS ECSへデプロイする"}]